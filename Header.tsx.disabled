// components/Header.tsx
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { useState, useRef, useEffect } from 'react';
import { useSession, signIn, signOut } from 'next-auth/react';
import { User as UserIcon, ChevronDown } from 'lucide-react';

const menus = [
  {
    key: 'product' as const,
    label: 'Product',
    items: [
      { href: '/pricing', label: 'Pricing' },
      { href: '/features', label: 'Features' },
    ],
  },
  {
    key: 'resources' as const,
    label: 'Resources',
    items: [
      { href: '/documentation', label: 'Documentation' },
      { href: '/tutorials', label: 'Tutorials' },
    ],
  },
  {
    key: 'company' as const,
    label: 'Company',
    items: [
      { href: '/about', label: 'About' },
      { href: '/contact', label: 'Contact' },
    ],
  },
];

export default function Header() {
  const { data: session, status } = useSession();
  console.log('useSession status:', status, 'session:', session);
  const [menuOpen, setMenuOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // close dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(e: MouseEvent) {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(e.target as Node)
      ) {
        setMenuOpen(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    console.log('Header session state:', status, session)
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className="fixed top-0 left-0 w-full bg-black text-white px-6 py-4 flex items-center justify-between border-b border-gray-800 z-50">
      {/* Logo */}
      <Link href="/" className="flex items-center">
        <Image
          src="/images/theonelogo.png"
          alt="Logo"
          width={128}
          height={128}
          className="h-10 w-auto"
        />
      </Link>

      {/* Primary nav menus */}
      <nav className="flex items-center gap-6">
        {menus.map(({ key, label, items }) => (
          <div key={key} className="relative group">
            <button className="hover:text-teal-400 transition">{label}</button>
            <div className="absolute left-0 top-full w-40 bg-gray-900 rounded shadow-lg py-2 z-50
                             opacity-0 invisible group-hover:visible group-hover:opacity-100 transition-opacity">
              {items.map(({ href, label }) => (
                <Link
                  key={href}
                  href={href}
                  className="block px-4 py-2 hover:bg-gray-800"
                >
                  {label}
                </Link>
              ))}
            </div>
          </div>
        ))}

        {/* Get Started â†’ Pricing */}
        <Link
          href="/pricing"
          className="ml-4 bg-gradient-to-r from-cyan-400 via-teal-400 to-purple-500
                     hover:brightness-110 text-white px-4 py-2 rounded-lg font-semibold transition"
        >
          Get Started
        </Link>

       {/* User icon dropdown */}
<div className="relative ml-2" ref={dropdownRef}>
  <button
    onClick={() => setMenuOpen(o => !o)}
    className="flex items-center p-2 rounded-full bg-gray-800 hover:bg-gray-700 transition"
  >
    <UserIcon className="h-5 w-5" />
    <ChevronDown className="h-4 w-4 ml-1" />
  </button>

  {menuOpen && (
    <div className="absolute right-0 mt-2 w-48 bg-gray-900 rounded shadow-lg py-1 z-50">
      {/* Always show Help */}
      <Link
        href="/help"
        className="block px-4 py-2 text-sm hover:bg-gray-800"
      >
        Help
      </Link>

      {/* If signed out: Sign In */}
      {status === 'unauthenticated' && (
        <button
          onClick={() =>
            signIn(undefined, { callbackUrl: '/dashboard' })
          }
          className="w-full text-left px-4 py-2 text-sm hover:bg-gray-800"
        >
          Sign In
        </button>
      )}

      {/* If signed in: show name & Sign Out */}
      {status === 'authenticated' && session?.user && (
        <>
          <span className="block px-4 py-2 text-sm">
            {session.user.name ?? session.user.email}
          </span>
          <button
            onClick={() => signOut({ callbackUrl: '/' })}
            className="w-full text-left px-4 py-2 text-sm hover:bg-gray-800"
          >
            Sign Out
          </button>
        </>
      )}
    </div>
  )}
</div>
      </nav>
    </header>
  );
}
